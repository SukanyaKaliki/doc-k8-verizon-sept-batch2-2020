Rajesh Kumar
+91 8105843520
===================

9:30 AM - 6:30 PM - Test@6PM IST
=====================================
Pre Test - Now
Post Test - 5th Day
====================================
Lunch break - 1 PM IST - 2:00 PM
Coffee - Rest Rooms - 15 mins each 
==================================
Lab - - 

https://www.devopsschool.com/lms/

Docker Essential Quiz - 1
https://www.devopsschool.com/lms/mod/quiz/view.php?id=250

Kubernetes Essential Quiz - 1
https://www.devopsschool.com/lms/mod/quiz/view.php?id=319

Marks	0.00/25.00
Grade	0.00 out of 10.00 (0%)
====================================

Docker - 2 Days
Kube - 3 Days
===============================
What is Docker?
	Container mgmt tool.
	Container Interface
	Open Source
	Written Golang
	By Soloman
	Release
		Community ed
		Enterprise ed
	version
		19.X

	mgmt - managing something(container)
	tool - 
		Save cost
		Saving time
		Imp* effiency*
				FOR RUNNING APPS in Datacenter
	What is Container?
	=========================
	Lighteight Fully Independent/ISOlated APP run time env with all dependency in place.
	
	USER SPACE
			with their own
				net
				mnt
				pid
		

How any APPS can run in Compute unit?
What are the componets we NEED IT to RUN apps?
=============================================

Kernal
	namespace
		PID NS - pro	1
		USER NS - 	N
		MOUNT nS	1
		Net		1
		
		CGROUPS	
		Capabitlies 	ROOT or NON root

	PID
	A PID (i.e., process identification number) is an identification number that is automatically assigned 	to each process when it is created on a Unix-like operating system. A process is an executing (i.e., 	running) instance of a program. Each process is guaranteed a unique PID, which is always a non-negative 	integer
	cgroups 
	(abbreviated from control groups) is a Linux kernel feature that limits, accounts for, and isolates the 	resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.

	Filesystem(S)
	BOOT Filesystem ( Kernal code )
		ROOT Filesystem 
			USER Filesystem 
			APP Filesystem 
	
==================================================================================================
1990s		 FREEAPS	2000s					Now
==================================================================================================
DESKTOP	
PYHYSCAL SERVER				VIRTUAL SERVER	

PC - Personal Computing	
	==== OS == KERNAL
		PID NS - pro	1
		USER NS - 	N
		MOUNT nS	1
		Net		1						

======================================================
Other container mgmt tool?
=======================================================
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/


How to install Docker?
====================================
Demo - 13.126.146.144
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

Docker Architecutre? Aka How Docker Works!!!
==========================================
Human -> Docker Client ----REST---> Docker Deamon -> ContainerD -> Kernal
	==================================
		Docker Engine

Docker Components 
=====================================
Docker Engine
	Tool which you have already Installed.
Docker Image
	is collection of Filesystem 	
	ROOT Filesystem aka Base
		USER Filesystem 
		APP Filesystem 
	From One Image - You can create multiple container.
	Copy of Image GET MOUnTED at eaCh container
	What u have in image - you have in container.

Docker Registry
	Repo(s)
	each repo has docker image
	
	PUB
		hub.docker.com
	PVT
		artifactory
		nexus
		ecr
	
	Which APPs you want to run inside a container?
	===========================================
	Jenkins Image
	Rootfs => JDK => jenkins user fs => Jenkins app
	WEB 	NODE
	8080	50000

Docker Container
	When u create one container 
			The image get mounted to USER NS
					with one NET NS and ONE PID NS


Docker Workflows
=====================================
Human -> Docker Client --> Docker Deamon
					CHECK "Do i have that image in Local registry"
					YES
						Call containerD to create container
					NO
						Download image from HUB and 
						Call containerD to create container


Vms Lifecycle
======================================
create -> start -> stop -> restart -> pause -> unpause -> kill -> remove

   1  which docker
    2  ps -eaf |
    3  ps -eaf | grep docker
    4  which containerd
    5  docker info
    6  clear
    7  docker
    8  clear
    9  docker -v
   10  docker version
   11  clear
   12  docker inof
   13  docker info
   14  clear
   15  docker help
   16  clear
   17  docker images
   18  docker ps		# running containers
   19  docker ps -a		# all containers
   20  history


Container Lifecycle
======================================
create -> start -> stop -> restart -> pause -> unpause -> kill -> remove

   22  docker images
   23  docker pull jenkins
   24  clear
   25  docker images
   26  docker ps
   27  docker ps -a
   28  docker create jenkins
   29  docker ps
   30  docker ps -a
   31  docker start c4b948b2d3d4
   32  docker ps -a
   33  clear
   34  docker ps
   35  docker stop c4b948b2d3d4
   36  docker ps
   37  docker ps -a
   38  docker restart c4b948b2d3d4
   39  docker ps -a
   40  clear
   41  docker ps
   42  dcoker pause c4b948b2d3d4
   43  docker pause c4b948b2d3d4
   44  docker ps
   45  docker unpause c4b948b2d3d4
   46  docker ps
   47  docker kill c4b948b2d3d4
   48  clear
   49  docker ps
   50  docker ps -a
   51  docker rm c4b948b2d3d4
   52  docker images
   53  docker ps
   54  clear
   55  docker ps -a
   56  docker create jenkins
   57  docker create jenkins
   58  docker create jenkins
   59  docker create jenkins
   60  docker ps -a
   61  docker start c64e23088c87 0182da5a32b1 2049cca0079b
   62  clear
   63  docker ps
   64  docker ps -a



Assignment
=====================
stop vs kill ?????
pause vs unpause ????


Proof "What is container"
=================================
Kernal
	namespace
		PID NS - pro	1
		USER NS - 	N
		MOUNT nS	1
		Net		1

 78  docker ps -a
   79  ps
   80  ps
   81  ps
   82  clear
   83  ls
   84  ps
   85  ps -eaf | grep 18216
   86  ps -eaf | grep 18214
   87  ps -eaf | grep 18195
   88  ps -eaf | grep 18194
   89  ps -eaf | grep 18191
   90  ps -eaf | grep 1230
   91  clear
   92  ps -eaf
   93  clear
   94  ls
   95  docker ps
   96  docker stop 2049cca0079b 0182da5a32b1
   97  clear
   98  docker ps
   99  ps -eaf | grep docker
  100  ps -eaf | grep 19015
  101  ps -eaf | grep 8979
  102  clear
  103  ps -eaf | grep docker
  104  exit
  105  exit
  106  docker exec -it c64e23088c87 /bin/bash
  107  ps -eaf
  108  clear
  109  docker exec -it c64e23088c87 /bin/bash
  110  df -kh
  111  docker ps
  112  clear
  113  docker ps -a
  114  docker start 0182da5a32b1
  115  clear
  116  df -kh
  117  cd /var/lib/docker/overlay2/4e08f07a31cd0820a242bb0ad605abcf824966a2e572e5fc416d7a9a33b8bdc1/merged
  118  ls
  119  pwd
  120  docker ps
  121  clear
  122  docker ps
  123  docker exec c64e23088c87 df -kh
  124  docker exec c64e23088c87 ls /
  125  clear
  126  docker exec 0182da5a32b1 ls /
  127  docker exec 0182da5a32b1 df -kh
  128  docker exec c64e23088c87 df -kh
  129  docker exec c64e23088c87 ls /var/jenkins_home
  130  docker exec 0182da5a32b1 ls /var/jenkins_home
  131  docker exec 0182da5a32b1 touch /var/jenkins_home/rajesh.txt
  132  docker exec c64e23088c87 ls /var/jenkins_home
  133  docker exec 0182da5a32b1 ls /var/jenkins_home
  134  clear
  135  docker ps
  136  docker inspect c64e23088c87 | grep -i ip
  137  docker inspect 0182da5a32b1 | grep -i ip
  138  clear
  139  ls
  140  cd
  141  ls

How to work with or use container?
===================================
Imporants of PID 1
=============================
Physcial Server		Virtual Server		Container
is running		is running		is running
Only & IF		Only & IF		Only & IF 
PID 1 is running	PID 1 is running	PID 1 is running

will be systemd		will be systemd		ANYTHING


145  clear
  146  docker ps
  147* docker exec c64e
  148  docker exec -it c64e23088c87 /bin/bash
  149  docker ps
  150  docker exec -it 0182da5a32b1 /bin/bash
  151  docker ps
  152  docker ps -a
  153  docker start c64e23088c87
  154  clear
  155  docker ps
  156  docker exec -it c64e23088c87 /bin/bash
  157  docker ps

What is RUN?
============================================
pull -> create -> start - Become(Attached to a container)

What is RUN -d?
============================================
pull -> create -> start - DO NOT Become(DeAttached to a container)



How can i go inside a container?
=========================================
exec
	Would execute an any executable inside a container
	BUT with -it and /bin/bash - to inside a container.

 114  docker exec a7294712959f ls
  115  docker exec a7294712959f df -kh
  116  clear
  117  docker exec a7294712959f sss
  118  clear
  119  docker ps'
  120  docker ps
  121  docker exec a7294712959f /bin/bash
  122  docker exec -it a7294712959f /bin/bash


attach
	it get attached to PID 1.

====================================================================
If you are -it with bash - you can use CONTRL + p + Q to come out of the container.
====================================================================
  107  clear
  108  docker run -d jenkins
  109  docker ps
  110  clear
  111  ps -eaf
  112  clear
  113  docker run -it ubuntu
  114  docker ps -a
  115  clear
  116  docker run -it ubuntu
  117  docker ps


How can i access from outside using port? - web

docker run -d -p 8080:8080 jenkins

120  docker ps
  121  docker inspect c64e23088c87 | grep -i ip
  122  ping 172.17.0.2
  123  clear
  124  curl http://172.17.0.2:8080
  125  clear'
  126  clear
  127  docker run -d -p 8080:8080 jenkins
  128  docker ps
  129  docker run -d -p 8080:8080 jenkins
  130  docker run -d -p 8081:8080 jenkins


How to troubleshoot a docker?
=================================





















