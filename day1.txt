Rajesh Kumar
+91 8105843520
===================

9:30 AM - 6:30 PM - Test@6PM IST
=====================================
Pre Test - Now
Post Test - 5th Day
====================================
Lunch break - 1 PM IST - 2:00 PM
Coffee - Rest Rooms - 15 mins each 
==================================
Lab - - 

https://www.devopsschool.com/lms/

Docker Essential Quiz - 1
https://www.devopsschool.com/lms/mod/quiz/view.php?id=250

Kubernetes Essential Quiz - 1
https://www.devopsschool.com/lms/mod/quiz/view.php?id=319

Marks	0.00/25.00
Grade	0.00 out of 10.00 (0%)
====================================

Docker - 2 Days
Kube - 3 Days
===============================
What is Docker?
	Container mgmt tool.
	Container Interface
	Open Source
	Written Golang
	By Soloman
	Release
		Community ed
		Enterprise ed
	version
		19.X

	mgmt - managing something(container)
	tool - 
		Save cost
		Saving time
		Imp* effiency*
				FOR RUNNING APPS in Datacenter
	What is Container?
	=========================
	Lighteight Fully Independent/ISOlated APP run time env with all dependency in place.
	
	USER SPACE
			with their own
				net
				mnt
				pid
		

How any APPS can run in Compute unit?
What are the componets we NEED IT to RUN apps?
=============================================

Kernal
	namespace
		PID NS - pro	1
		USER NS - 	N
		MOUNT nS	1
		Net		1
		
		CGROUPS	
		Capabitlies 	ROOT or NON root

	PID
	A PID (i.e., process identification number) is an identification number that is automatically assigned 	to each process when it is created on a Unix-like operating system. A process is an executing (i.e., 	running) instance of a program. Each process is guaranteed a unique PID, which is always a non-negative 	integer
	cgroups 
	(abbreviated from control groups) is a Linux kernel feature that limits, accounts for, and isolates the 	resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.

	Filesystem(S)
	BOOT Filesystem ( Kernal code )
		ROOT Filesystem 
			USER Filesystem 
			APP Filesystem 
	
==================================================================================================
1990s		 FREEAPS	2000s					Now
==================================================================================================
DESKTOP	
PYHYSCAL SERVER				VIRTUAL SERVER	

PC - Personal Computing	
	==== OS == KERNAL
		PID NS - pro	1
		USER NS - 	N
		MOUNT nS	1
		Net		1						

======================================================
Other container mgmt tool?
=======================================================
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/


How to install Docker?
====================================
Demo - 13.126.146.144
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html

Docker Architecutre? Aka How Docker Works!!!
==========================================
Human -> Docker Client ----REST---> Docker Deamon -> ContainerD -> Kernal
	==================================
		Docker Engine

Docker Components 
=====================================
Docker Engine
	Tool which you have already Installed.
Docker Image
	is collection of Filesystem 	
	ROOT Filesystem 
		USER Filesystem 
		APP Filesystem 
	From One Image - You can create multiple container.
	Copy of Image GET MOUnTED at eaCh container
	What u have in image - you have in container.

Docker Registry
	Repo(s)
	each repo has docker image
	
	PUB
		hub.docker.com
	PVT
		artifactory
		nexus
		ecr
	
	Which APPs you want to run inside a container?
	===========================================
	Jenkins Image
	Rootfs => JDK => jenkins user fs => Jenkins app
	WEB 	NODE
	8080	50000

Docker Container
	When u create one container 
			The image get mounted to USER NS
					with one NET NS and ONE PID NS


Docker Workflows
=====================================
Human -> Docker Client --> Docker Deamon
					CHECK "Do i have that image in Local registry"
					YES
						Call containerD to create container
					NO
						Download image from HUB and 
						Call containerD to create container


Vms Lifecycle
======================================
create -> start -> stop -> restart -> pause -> unpause -> kill -> remove

   1  which docker
    2  ps -eaf |
    3  ps -eaf | grep docker
    4  which containerd
    5  docker info
    6  clear
    7  docker
    8  clear
    9  docker -v
   10  docker version
   11  clear
   12  docker inof
   13  docker info
   14  clear
   15  docker help
   16  clear
   17  docker images
   18  docker ps		# running containers
   19  docker ps -a		# all containers
   20  history


Container Lifecycle
======================================
create -> start -> stop -> restart -> pause -> unpause -> kill -> remove

   22  docker images
   23  docker pull jenkins
   24  clear
   25  docker images
   26  docker ps
   27  docker ps -a
   28  docker create jenkins
   29  docker ps
   30  docker ps -a
   31  docker start c4b948b2d3d4
   32  docker ps -a
   33  clear
   34  docker ps
   35  docker stop c4b948b2d3d4
   36  docker ps
   37  docker ps -a
   38  docker restart c4b948b2d3d4
   39  docker ps -a
   40  clear
   41  docker ps
   42  dcoker pause c4b948b2d3d4
   43  docker pause c4b948b2d3d4
   44  docker ps
   45  docker unpause c4b948b2d3d4
   46  docker ps
   47  docker kill c4b948b2d3d4
   48  clear
   49  docker ps
   50  docker ps -a
   51  docker rm c4b948b2d3d4
   52  docker images
   53  docker ps
   54  clear
   55  docker ps -a
   56  docker create jenkins
   57  docker create jenkins
   58  docker create jenkins
   59  docker create jenkins
   60  docker ps -a
   61  docker start c64e23088c87 0182da5a32b1 2049cca0079b
   62  clear
   63  docker ps
   64  docker ps -a



Assignment
=====================
stop vs kill ?????
pause vs unpause ????


Proof "What is container"
=================================





















